name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
env:
  PYTHON_VERSION: '3.12'

jobs:
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run comprehensive tests
      run: |
        python test_comprehensive.py
    
    - name: Run property-based tests
      run: |
        python test_property_based.py
    
    - name: Run benchmark scenarios
      run: |
        timeout 300 python test_benchmark_scenarios.py || echo "Benchmark tests completed or timed out"
      continue-on-error: true
    
    - name: Generate coverage report
      run: |
        python -m pytest --cov=texas_holdem_calculator --cov=range_parser --cov-report=xml --cov-report=html test_*.py || true
      continue-on-error: true

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [test-suite]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Test basic functionality
      run: |
        python -c "from texas_holdem_calculator import TexasHoldemCalculator, parse_card_string; calc = TexasHoldemCalculator(); result = calc.calculate_win_probability([parse_card_string('As'), parse_card_string('Ks')], num_simulations=100); print('Basic test passed:', result['win_probability'] > 0.5)"
    
    - name: Test range parsing
      run: |
        python -c "from range_parser import parse_ranges; r = parse_ranges('AA'); print('Range parsing test passed:', r.size() == 6)"
      continue-on-error: true

  security-and-quality:
    name: Security and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit ruff black || true
    
    - name: Run safety check
      run: |
        safety check || echo "Safety check completed"
      continue-on-error: true
    
    - name: Run security scan
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Security scan completed"
      continue-on-error: true
    
    - name: Check code formatting
      run: |
        black --check . || echo "Code formatting check completed"
      continue-on-error: true
